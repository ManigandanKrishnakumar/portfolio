{"version":3,"sources":["assets/mani.png","assets/mani-logo-white.svg","assets/mani-logo.svg","logo.svg","themes/light.js","themes/dark.js","constants/theme.js","helper-functions/getTheme.js","styled-components/GlobalStyles.js","components/Logo/Logo.js","components/ThemeSwitch/ThemeSwitch.js","components/Header/Header.js","custom-hooks/useTheme.js","services/ThemeService.js","components/UnderConstruction/UnderConstruction.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","mainBgColor","highlightColor","fontColor","darkTheme","THEMES","getTheme","themeName","DARK","LIGHT","GlobalStyles","createGlobalStyle","props","theme","className","src","logoPurple","logoWhite","height","onThemeChange","inputRef","React","createRef","checked","type","id","ref","onClick","current","for","currentTheme","useState","setCurrentTheme","useEffect","setUITheme","window","matchMedia","matches","class","devImage","alt","App","useTheme","uiTheme","setUiTheme","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,wBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,uC,uECA3CD,EAAOC,QAAU,IAA0B,kC,0NCA5B,GACbC,YAAa,UACbC,eAAgB,UAChBC,UAAW,WCGEC,EANG,CAChBH,YAAa,UACbC,eAAgB,UAChBC,UAAW,QCHAE,EACJ,QADIA,EAEL,OCCKC,EAAW,SAACC,GACvB,OAAQA,GACN,KAAKF,EACH,OAAOG,EACT,KAAKH,EAEL,QACE,OAAOI,I,uNCRb,IAYeC,EAZMC,YAAH,KAEK,SAACC,GAAD,OAAWA,EAAMC,MAAMZ,eACrB,SAACW,GAAD,OAAWA,EAAMC,MAAMX,kBAC5B,SAACU,GAAD,OAAWA,EAAMC,MAAMV,a,kCCA5B,G,MAAA,YAAc,IAAZU,EAAW,EAAXA,MACf,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAKF,IAAUR,EAAeW,IAAaC,IAC3CH,UAAU,WACVI,OAAO,U,qBCPA,cAA6B,IAA3BC,EAA0B,EAA1BA,cAAeN,EAAW,EAAXA,MACxBO,EAAWC,IAAMC,YAOvB,OACE,yBAAKR,UAAU,0BACb,kBAAC,IAAD,CAAYA,UAAU,aACtB,yBAAKA,UAAU,mBACb,2BACES,QAASV,IAAUR,EACnBmB,KAAK,WACLC,GAAG,SACHC,IAAKN,EACLO,QAfQ,WACdP,EAASQ,QAAQL,QACbJ,EAAcd,GACdc,EAAcd,MAcd,2BAAOwB,IAAI,YAEb,kBAAC,IAAD,CAAWf,UAAU,iBCrBZ,cAAoC,IAAlCgB,EAAiC,EAAjCA,aAAcX,EAAmB,EAAnBA,cAC7B,OACE,yBAAKL,UAAU,oBACb,kBAAC,EAAD,CAAMD,MAAOiB,IACb,kBAAC,EAAD,CAAajB,MAAOiB,EAAcX,cAAeA,MCNxC,aAAO,IAAD,EACqBY,qBADrB,mBACZD,EADY,KACEE,EADF,KAMnB,OAJAC,qBAAU,WCCmB,IAACC,IDAZF,ECEhBG,OAAOC,YACPD,OAAOC,WAAW,gCAAgCC,QAElDH,EAAW7B,GAEX6B,EAAW7B,KDNV,IAEI,CAACyB,EAAcE,IEHT,G,MAAA,WACb,OACE,yBAAKlB,UAAU,aACb,yBAAKwB,MAAM,WACT,yBAAKvB,IAAKwB,IAAUzB,UAAU,YAAY0B,IAAI,SAC9C,sDACA,kBAAC,IAAD,CAAgB1B,UAAU,sBAC1B,uBAAGA,UAAU,eAAb,iECaO2B,MAbf,WAAgB,IAAD,EACiBC,IADjB,mBACNC,EADM,KACGC,EADH,KAEb,OACE,kBAAC,IAAD,CAAe/B,MAAOP,EAASqC,IAC7B,kBAAC,EAAD,MACA,yBAAK7B,UAAU,OACb,kBAAC,EAAD,CAAQgB,aAAca,EAASxB,cAAeyB,IAC9C,kBAAC,EAAD,SCRYC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fe8961c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mani.7e73afa2.png\";","module.exports = __webpack_public_path__ + \"static/media/mani-logo-white.ea9dd415.svg\";","module.exports = __webpack_public_path__ + \"static/media/mani-logo.16382323.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default {\n  mainBgColor: '#fbfbfb',\n  highlightColor: '#7510F7',\n  fontColor: '#141c3a',\n};\n","const darkTheme = {\n  mainBgColor: '#282c34',\n  highlightColor: '#7c61c1',\n  fontColor: '#FFF',\n};\n\nexport default darkTheme;\n","export const THEMES = {\n  LIGHT: \"light\",\n  DARK: \"dark\",\n};\n","import {DARK, LIGHT} from '../themes';\nimport {THEMES} from '../constants/theme';\n\nexport const getTheme = (themeName) => {\n  switch (themeName) {\n    case THEMES.DARK:\n      return DARK;\n    case THEMES.LIGHT:\n      return LIGHT;\n    default:\n      return LIGHT;\n  }\n};\n","import {createGlobalStyle} from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  :root {\n    --main-bg-color: ${(props) => props.theme.mainBgColor};\n    --highlight-color: ${(props) => props.theme.highlightColor};\n    --font-color: ${(props) => props.theme.fontColor};\n  }\n\n  body {\n    overflow: hidden;\n  }\n`;\n\nexport default GlobalStyles;\n","import React from 'react';\nimport logoWhite from '../../assets/mani-logo-white.svg';\nimport logoPurple from '../../assets/mani-logo.svg';\nimport {THEMES} from '../../constants/theme';\nimport './Logo.scss';\n\nexport default ({theme}) => {\n  return (\n    <div className=\"logo-container\">\n      <img\n        src={theme === THEMES.LIGHT ? logoPurple : logoWhite}\n        className=\"logo-img\"\n        height=\"48\"\n      />\n    </div>\n  );\n};\n","import React, {useEffect} from 'react';\nimport './ThemeSwitch.scss';\nimport {THEMES} from '../../constants/theme';\nimport {IoIosSunny, IoIosMoon} from 'react-icons/io';\n\nexport default ({onThemeChange, theme}) => {\n  const inputRef = React.createRef();\n  const onCheck = () => {\n    inputRef.current.checked\n      ? onThemeChange(THEMES.DARK)\n      : onThemeChange(THEMES.LIGHT);\n  };\n\n  return (\n    <div className=\"theme-switch-container\">\n      <IoIosSunny className=\"day-icon\" />\n      <div className=\"switch-checkbox\">\n        <input\n          checked={theme === THEMES.DARK}\n          type=\"checkbox\"\n          id=\"switch\"\n          ref={inputRef}\n          onClick={onCheck}\n        />\n        <label for=\"switch\"></label>\n      </div>\n      <IoIosMoon className=\"night-icon\" />\n    </div>\n  );\n};\n","import React from 'react';\nimport Logo from '../Logo/Logo';\nimport './Header.scss';\nimport ThemeSwitch from '../ThemeSwitch/ThemeSwitch';\n\nexport default ({currentTheme, onThemeChange}) => {\n  return (\n    <div className=\"header-container\">\n      <Logo theme={currentTheme} />\n      <ThemeSwitch theme={currentTheme} onThemeChange={onThemeChange} />\n    </div>\n  );\n};\n","import React, {useState, useEffect} from 'react';\nimport {InitializeTheme} from '../services/ThemeService';\n\nexport default () => {\n  const [currentTheme, setCurrentTheme] = useState();\n  useEffect(() => {\n    InitializeTheme(setCurrentTheme);\n  }, []);\n\n  return [currentTheme, setCurrentTheme];\n};\n","import {THEMES} from '../constants/theme';\n\n/**\n * This function initializes theme\n * @param {string} setUITheme\n */\nexport const InitializeTheme = (setUITheme) => {\n  if (\n    window.matchMedia &&\n    window.matchMedia('(prefers-color-scheme: dark)').matches\n  ) {\n    setUITheme(THEMES.DARK);\n  } else {\n    setUITheme(THEMES.LIGHT);\n  }\n};\n","import React from 'react';\nimport './UnderConstruction.scss';\n\nimport {IoIosConstruct} from 'react-icons/io';\nimport devImage from '../../assets/mani.png';\n\nexport default () => {\n  return (\n    <div className=\"container\">\n      <div class=\"content\">\n        <img src={devImage} className=\"dev-image\" alt=\"logo\" />\n        <h1> Hi ! I'm Manigandan. </h1>\n        <IoIosConstruct className=\"construction-icon\" />\n        <p className=\"description\">\n          This site is under construction. Please Visit back Later.\n        </p>\n      </div>\n    </div>\n  );\n};\n","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport devImage from './assets/mani.png';\nimport './App.scss';\nimport {IoIosConstruct} from 'react-icons/io';\nimport {ThemeProvider} from 'styled-components';\nimport {getTheme} from './helper-functions/getTheme';\nimport {THEMES} from './constants/theme';\nimport GlobalStyles from './styled-components/GlobalStyles';\nimport Header from './components/Header/Header';\nimport useTheme from './custom-hooks/useTheme';\nimport UnderConstruction from './components/UnderConstruction/UnderConstruction';\n\nfunction App() {\n  const [uiTheme, setUiTheme] = useTheme();\n  return (\n    <ThemeProvider theme={getTheme(uiTheme)}>\n      <GlobalStyles />\n      <div className=\"App\">\n        <Header currentTheme={uiTheme} onThemeChange={setUiTheme} />\n        <UnderConstruction />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}